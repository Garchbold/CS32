{\rtf1\ansi\ansicpg1252\cocoartf1345\cocoasubrtf380
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red63\green110\blue116;\red15\green116\blue1;
\red28\green0\blue207;\red38\green71\blue75;\red92\green38\blue153;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f0\fs22 \cf0 \expnd0\expndtw0\kerning0
George Archbold\
CS 32 \
Smallberg\
4/21/15\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\qc
\cf0 \expnd0\expndtw0\kerning0
Project 2\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
	This project was pretty interesting in my opinion. It really helped me to understand how linked lists work, and also I better applied coding thought process before coding as opposed to coding and testing until it works. I implemented a doubly linked list that was not circular, where each sequence held a list of nodes each with its own data and pre and next pointers. Then there was a head and tail pointer at the beginning and end.\
\
PSUDEOCODE:  \
\
\pard\tx529\pardeftab720

\f1\fs20 \cf2 \expnd0\expndtw0\kerning0
\CocoaLigature0 bool\cf0 \expnd0\expndtw0\kerning0
 \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
::insert(\cf2 \expnd0\expndtw0\kerning0
int\cf0 \expnd0\expndtw0\kerning0
 pos, \cf2 \expnd0\expndtw0\kerning0
const\cf0 \expnd0\expndtw0\kerning0
 \cf3 \expnd0\expndtw0\kerning0
ItemType\cf0 \expnd0\expndtw0\kerning0
& value)\{\
    \
    check for invalid position\
    \
    \cf3 \expnd0\expndtw0\kerning0
node\cf0 \expnd0\expndtw0\kerning0
* current;\
    \cf3 \expnd0\expndtw0\kerning0
node\cf0 \expnd0\expndtw0\kerning0
* prev;\
   \
	if head points to null and seq is empty\
	create a new node and set pointers\
       \
    current = \cf3 \expnd0\expndtw0\kerning0
m_head\cf0 \expnd0\expndtw0\kerning0
;\
    prev = \cf2 \expnd0\expndtw0\kerning0
nullptr\cf0 \expnd0\expndtw0\kerning0
;\
	^^keep track of seq iteration\
    \
	for loop though seq to find the node where pos is located\
	set that position = current\
	if not found return false\
   \
	create a new node set its pointers to appropriate pre and next values \
	to be inserted at pos\
\
	if new node is inserted at the beginning reset the head and return\
	if new node is inserted at the end reset the tail and return\
    \cf4 \expnd0\expndtw0\kerning0
  \
\cf0 \expnd0\expndtw0\kerning0
\}\
\
\cf2 \expnd0\expndtw0\kerning0
bool\cf0 \expnd0\expndtw0\kerning0
 \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
::erase(\cf2 \expnd0\expndtw0\kerning0
int\cf0 \expnd0\expndtw0\kerning0
 pos)\{\cf3 \expnd0\expndtw0\kerning0
\
\cf0 \expnd0\expndtw0\kerning0
    check for invalid position\
    \
    \cf3 \expnd0\expndtw0\kerning0
node\cf0 \expnd0\expndtw0\kerning0
* current = \cf3 \expnd0\expndtw0\kerning0
m_head\cf0 \expnd0\expndtw0\kerning0
;\
    \cf3 \expnd0\expndtw0\kerning0
node\cf0 \expnd0\expndtw0\kerning0
* prev = \cf2 \expnd0\expndtw0\kerning0
nullptr\cf0 \expnd0\expndtw0\kerning0
;\
\
    iterate through the list and point to the node at pos   \
	return false if not found;\
    \
	if erasing head re assign pointers and delete memory\
	if erasing tail re assign pointers and delete memory\
	return\
       \
    if in the middle\
	change pointers to skip node at pos and then delete it\
\
   
\fs18 \cf2 \expnd0\expndtw0\kerning0
int\cf0 \expnd0\expndtw0\kerning0
 subsequence(\cf2 \expnd0\expndtw0\kerning0
const\cf0 \expnd0\expndtw0\kerning0
 \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
& seq1, \cf2 \expnd0\expndtw0\kerning0
const\cf0 \expnd0\expndtw0\kerning0
 \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
& seq2)\{\
    \
    \cf4 \expnd0\expndtw0\kerning0
copy seq1 to avoid changing it\
\pard\tx529\pardeftab720
\cf0 \expnd0\expndtw0\kerning0
    \
    \cf4 \expnd0\expndtw0\kerning0
//variables to keep track of positions and values\cf0 \expnd0\expndtw0\kerning0
\
    \cf2 \expnd0\expndtw0\kerning0
int\cf0 \expnd0\expndtw0\kerning0
 num_erased = \cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
;\
    \
    \cf3 \expnd0\expndtw0\kerning0
ItemType\cf0 \expnd0\expndtw0\kerning0
 value1 = \cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
;\
    \cf3 \expnd0\expndtw0\kerning0
ItemType\cf0 \expnd0\expndtw0\kerning0
 value2 = \cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
;\
    \cf2 \expnd0\expndtw0\kerning0
int\cf0 \expnd0\expndtw0\kerning0
 pos1;\
    \cf2 \expnd0\expndtw0\kerning0
int\cf0 \expnd0\expndtw0\kerning0
 pos2;\
    \
    \cf4 \expnd0\expndtw0\kerning0
while loop until signalled otherwise\cf0 \expnd0\expndtw0\kerning0
\
    \cf2 \expnd0\expndtw0\kerning0
     \
\cf0 \expnd0\expndtw0\kerning0
    use get function to look in seq2 for first node in seq1 \
    if found store that position in value2\
       \cf2 \expnd0\expndtw0\kerning0
   \
\cf0 \expnd0\expndtw0\kerning0
    then while the values are the same\
	interate to next position in both\
	use get functions to store those values\
\
	check if they are not equal\
		if not then erase the first instance of the same value\
		break the loop and start from beginning again\
		store number of instances erased\
	if full subset is found break main while loop\
	\
	return the pos\cf4 \expnd0\expndtw0\kerning0
 of the sub seq in seq1\
		      \
\cf0 \expnd0\expndtw0\kerning0
     \cf4 \expnd0\expndtw0\kerning0
\}\
\
\pard\tx529\pardeftab720

\fs20 \cf2 \expnd0\expndtw0\kerning0
void\cf0 \expnd0\expndtw0\kerning0
 interleave(\cf2 \expnd0\expndtw0\kerning0
const\cf0 \expnd0\expndtw0\kerning0
 \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
& seq1, \cf2 \expnd0\expndtw0\kerning0
const\cf0 \expnd0\expndtw0\kerning0
 \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
& seq2, \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
& result)\{\
    \cf3 \expnd0\expndtw0\kerning0
copy both sequences\cf0 \expnd0\expndtw0\kerning0
\
    \
   check which seq is shorter\
   while loop:\
	get values from each separate list\
	then add them\
	when you get to the end break loop\
	\
   after loop check which seq was longer \
	iterate to the point of which it was already copied\
	add the rest of the nodes to result       \
\}\
\pard\tx529\pardeftab720

\fs18 \cf0 \expnd0\expndtw0\kerning0
\
\pard\tx529\pardeftab720

\fs22 \cf0 \expnd0\expndtw0\kerning0
TESTS:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720

\f2\fs26 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 Sequence s;\
	    assert(s.insert(0, "lavash"));\
	    assert(s.insert(0, "tortilla"));\
	    assert(s.size() == 2);\
	    ItemType x = "injera";\
	    assert(s.get(0, x)  &&  x == "tortilla");\
	    assert(s.get(1, x)  &&  x == \'93lavash");\
This tests the insert and get function and also sees if insert can override previous entries\
\
Sequence s;\
	    assert(s.insert(0, 10));\
	    assert(s.insert(0, 20));\
	    assert(s.size() == 2);\
	    ItemType x = 999;\
	    assert(s.get(0, x)  &&  x == 20);\
	    assert(s.get(1, x)  &&  x == 10);\
\
This tests if the functions work for different item types as well\
\
Sequence s;\
  // For an empty sequence:\
assert(s.size() == 0);            \
assert(s.empty());                \
assert(s.remove("paratha") == 0); \
\
This checks for the default constructor and uses different functions to test if its empty.\
\
\pard\tx529\pardeftab720

\f1\fs22 \cf3 \expnd0\expndtw0\kerning0
\CocoaLigature0 Sequence\cf0 \expnd0\expndtw0\kerning0
 a;\
\cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
 b;\
        a.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
);\
        a.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
);\
        a.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
);\
        a.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
3\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
);\
        a.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
4\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
3\cf0 \expnd0\expndtw0\kerning0
);\
        a.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
5\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
);\
    \
    \
        b.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
);\
        b.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
);\
        b.\cf6 \expnd0\expndtw0\kerning0
insert\cf0 \expnd0\expndtw0\kerning0
(\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
3\cf0 \expnd0\expndtw0\kerning0
);\
    \
    	   \cf7 \expnd0\expndtw0\kerning0
assert(\cf6 \expnd0\expndtw0\kerning0
subsequence\cf0 \expnd0\expndtw0\kerning0
(a, b) == 2)\
This tests that the subsequence function properly locates the desired sub sequence.\
\
    \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
 a;\
    \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
 b;\
    \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
 c;\
    \
    a.insert(\cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
3\cf0 \expnd0\expndtw0\kerning0
);\
    a.insert(\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
);\
    a.insert(\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
);\
    a.insert(\cf5 \expnd0\expndtw0\kerning0
3\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
);\
    \
    \
    b.insert(\cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
);\
    b.insert(\cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
);\
    b.insert(\cf5 \expnd0\expndtw0\kerning0
2\cf0 \expnd0\expndtw0\kerning0
,\cf5 \expnd0\expndtw0\kerning0
3\cf0 \expnd0\expndtw0\kerning0
);\
\
    interleave(a, b, c);\
\
Using the debugger with this code segment I was able to trace the addition of each node into result and check that it worked properly\
\
	a.insert(\cf5 \expnd0\expndtw0\kerning0
0\cf0 \expnd0\expndtw0\kerning0
, \cf5 \expnd0\expndtw0\kerning0
1\cf0 \expnd0\expndtw0\kerning0
);\
    \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
 b(a);\
    \cf3 \expnd0\expndtw0\kerning0
Sequence\cf0 \expnd0\expndtw0\kerning0
 c;\
    c=a;\
\
This code checks the copy constructor, the assignment operator and the destructor to see if they properly allocate new memory, copy over the data, and deallocate memory.\
}